input {
  tcp {
    port => "8080"
    tags => ["heroku_syslog"]
  }
}

filter {
  grok {
    match => { "message" => "%{NUMBER:priority} <%{NUMBER:facility}>%{NUMBER:version} %{TIMESTAMP_ISO8601:timestamp} %{DATA:app} %{DATA:process} - at=%{WORD:log_level} method=%{WORD:http_method} path=\"%{URIPATHPARAM:request_path}\" host=%{IPORHOST:request_host} request_id=%{UUID:request_id} fwd=\"%{DATA:fwd_ip}\" dyno=%{DATA:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocol}" }
    remove_field => [ "message", "event" ]
  }
  if "_grokparsefailure" not in [tags] {
    if "?" in [request_path] {
      dissect {
        mapping => {
          "request_path" => "%{path}?%{query_string}"
        }
      }
      kv {
        source => "query_string"
        field_split => "&?"
        remove_field => ["query_string", "search", "filter", "q", "cursor", "page", "per-page"]
      }
    }
  }
  if "_grokparsefailure" in [tags] {
    drop { }
  }
}

output {
    elasticsearch {
        hosts => ["${ES_HOST_API_USAGE_PROD}"]
        index => "openalex-heroku-logs-%{+YYYY.MM.dd}"
        user => "${ES_USER_PROD}"
        password => "${ES_PASSWORD_PROD}"
    }
    # stdout {}
}