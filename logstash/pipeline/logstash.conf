input {
    jdbc {
        jdbc_driver_library => "/usr/share/jars/redshift-jdbc42-2.1.0.1.jar"
        jdbc_driver_class => "com.amazon.redshift.jdbc42.Driver"
        jdbc_connection_string => "${JDBC_URL_PROD}"
        jdbc_user => "${JDBC_USER_PROD}"
        jdbc_password => "${JDBC_PASSWORD_PROD}"
        jdbc_fetch_size => 10
        last_run_metadata_path => "/usr/share/sql_last_value.yml"
        schedule => "* * * * *"
        statement => "SELECT * from mid.json_works WHERE updated > :sql_last_value order by updated;"
        # statement => "SELECT * from mid.json_works where updated > '2021-12-27T19:00:00.000' and updated < '2021-12-28T16:00:00.000';"
        use_column_value => true
        tracking_column => updated
        tracking_column_type => "timestamp"
    }
}

filter {
      mutate {
         gsub => [
          "json_elastic", "[\r\n]", "",
          "json_elastic", "[\t]", " "
        ]
      }
      json {
        source => "json_save"
      }
      if "_jsonparsefailure" in [tags] {
          mutate {
             gsub => [
              "json_save", "[\\]", ""
            ]
          }
          json {
             source => "json_save"
          }
      }
      if [publication_year] {
        mutate { convert => { "publication_year" => "integer" } }

        if [publication_year] < 1960 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1959-or-less" } }
        } else if [publication_year] > 1959 and [publication_year] < 1970 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1960s" } }
        } else if [publication_year] > 1969 and [publication_year] < 1980 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1970s" } }
        } else if [publication_year] > 1979 and [publication_year] < 1990 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1980s" } }
        } else if [publication_year] > 1989 and [publication_year] < 2000 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1990s" } }
        } else {
          mutate { add_field => { "[@metadata][index_suffix]" => "%{publication_year}" } }
        }
      } else {
        mutate { add_field => { "[@metadata][index_suffix]" => "invalid-data" } }
      }

      mutate {
        remove_field => ["json_save", "version"]
      }
}

output {
    elasticsearch {
        hosts => ["${ES_HOST_PROD}"]
        index => "works-v3-%{[@metadata][index_suffix]}"
        user => "${ES_USER_PROD}"
        password => "${ES_PASSWORD_PROD}"
        document_id => "%{id}"
    }
#      stdout { }
}