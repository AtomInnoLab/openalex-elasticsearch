input {
    jdbc {
        jdbc_driver_library => "/usr/share/jars/postgresql-42.3.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "${JDBC_URL_PROD}"
        jdbc_user => "${JDBC_USER_PROD}"
        jdbc_password => "${JDBC_PASSWORD_PROD}"
        jdbc_paging_enabled => true
        jdbc_page_size => 100000
        last_run_metadata_path => "/usr/share/sql_last_value.yml"
        schedule => "0 * * * *"
        statement => "SELECT updated, json_save, abstract, abstract_inverted_index, fulltext, authors_count, concepts_count from mid.json_works_fulltext_view WHERE updated >= TO_TIMESTAMP(:sql_last_value, 'YYYY-MM-DD hh24:mi:ss') - INTERVAL '3 min' and updated < now() - interval '1 min' order by updated"
        use_column_value => true
        tracking_column => updated
        tracking_column_type => "timestamp"
    }
}

filter {
      json {
        source => "json_save"
      }
      if [publication_year] {
        mutate { convert => { "publication_year" => "integer" } }

        if [publication_year] < 1960 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1959-or-less" } }
        } else if [publication_year] > 1959 and [publication_year] < 1970 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1960s" } }
        } else if [publication_year] > 1969 and [publication_year] < 1980 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1970s" } }
        } else if [publication_year] > 1979 and [publication_year] < 1990 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1980s" } }
        } else if [publication_year] > 1989 and [publication_year] < 1995 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1990-to-1994" } }
        } else if [publication_year] > 1994 and [publication_year] < 2000 {
          mutate { add_field => { "[@metadata][index_suffix]" => "1995-to-1999" } }
        } else if [publication_year] > 2025 {
          mutate { add_field => { "[@metadata][index_suffix]" => "invalid-data" } }
        } else {
          mutate { add_field => { "[@metadata][index_suffix]" => "%{publication_year}" } }
        }
      } else {
        mutate { add_field => { "[@metadata][index_suffix]" => "invalid-data" } }
      }

      ruby {
        code => "if event.get('authorships').is_a?(Array) and event.get('authorships').length > 100
          event.set('authorships_full', event.get('authorships'))
          event.set('authorships', event.get('authorships').slice(0, 100))
          event.set('authorships_truncated', true)
        end"
      }

      mutate {
        remove_field => ["json_save", "version"]
      }
}

output {
    elasticsearch {
        hosts => ["${ES_HOST_PROD}"]
        index => "works-v18-%{[@metadata][index_suffix]}"
        user => "${ES_USER_PROD}"
        password => "${ES_PASSWORD_PROD}"
        document_id => "%{id}"
    }

    # 同步成功后更新PostgreSQL记录状态
    if "_ingest_ok" in [tags] {
        jdbc {
            driver_jar_path => "/usr/share/jars/postgresql-42.3.5.jar"
            driver_class => "org.postgresql.Driver"
            connection_string => "${JDBC_URL_PROD}"
            username => "${JDBC_USER_PROD}"
            password => "${JDBC_PASSWORD_PROD}"
            statement => [
                "UPDATE mid.json_works SET sync_status = 'synced_to_es', synced_at = CURRENT_TIMESTAMP WHERE id = ?",
                "%{id}"
            ]
            plugin_timezone => "UTC"
        }
    }

#      stdout { }
}